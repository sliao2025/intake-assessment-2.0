generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// --- Clinic (Multi-Tenant) ---
model Clinic {
  id                String   @id @default(cuid())
  name              String
  subdomain         String   @unique  // e.g., "integrative-psych"
  customDomain      String?  @unique  // e.g., "intake.intpsych.com"
  
  // Branding
  logoUrl           String?
  primaryColor      String?  @default("#3B82F6")
  secondaryColor    String?  @default("#10B981")
  
  // Configuration (JSON for flexibility)
  config            Json?
  
  // Status
  isActive          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  users             User[]
  profiles          Profile[]
  
  @@index([subdomain])
  @@index([customDomain])
}

/// --- Auth.js (NextAuth) tables ---
model User {
  id            String    @id @default(cuid())
  email         String?   
  name          String?
  image         String?
  emailVerified DateTime?
  passwordHash  String?
  guest         Boolean?  @default(false)
  intakeFinished Boolean @default(false)
  
  // ðŸ”¥ Multi-tenant key
  clinicId      String
  clinic        Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  accounts      Account[]
  profile       Profile?
  sessions      Session[]
  
  @@unique([email, clinicId]) // Email unique per clinic, not globally
  @@index([clinicId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// --- Your Profile persistence (JSON blob) ---
model Profile {
  userId    String   @id
  json      Json
  version   Int      @default(1)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // ðŸ”¥ Multi-tenant key
  clinicId  String
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  // --- Denormalized scalars for faster querying/analytics ---
  firstName         String?
  lastName          String?
  email             String?
  contactNumber     String?
  age               String?
  race              String?
  genderIdentity    String?
  sexualOrientation String?
  highestDegree     String?
  isEmployed        Boolean?
  firstSubmittedAt  DateTime? @default(now())
  isChild           Boolean?
  
  @@index([clinicId])
  @@index([clinicId, firstSubmittedAt])
}
